{-# LANGUAGE GADTs #-}
module SkelLang where

-- Haskell module generated by the BNF converter

import AbsLang
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transTree :: Tree c -> Result
transTree t = case t of
  M decls -> failure t
  ValueInt integer -> failure t
  ModDecl model -> failure t
  RecDecl recipe -> failure t
  Mod ident layers -> failure t
  R ident layers -> failure t
  Op ingredient hyperparams -> failure t
  NamedRecipe ident -> failure t
  Relu  -> failure t
  Conv  -> failure t
  Hyps hyperparams -> failure t
  Stride values -> failure t
  Ident str -> failure t

transModule :: Module -> Result
transModule t = case t of
  M decls -> failure t

transValue :: Value -> Result
transValue t = case t of
  ValueInt integer -> failure t

transDecl :: Decl -> Result
transDecl t = case t of
  ModDecl model -> failure t
  RecDecl recipe -> failure t

transModel :: Model -> Result
transModel t = case t of
  Mod ident layers -> failure t

transRecipe :: Recipe -> Result
transRecipe t = case t of
  R ident layers -> failure t

transLayer :: Layer -> Result
transLayer t = case t of
  Op ingredient hyperparams -> failure t
  NamedRecipe ident -> failure t

transIngredient :: Ingredient -> Result
transIngredient t = case t of
  Relu  -> failure t
  Conv  -> failure t

transHyperParams :: HyperParams -> Result
transHyperParams t = case t of
  Hyps hyperparams -> failure t

transHyperParam :: HyperParam -> Result
transHyperParam t = case t of
  Stride values -> failure t

transIdent :: Ident -> Result
transIdent t = case t of
  Ident str -> failure t

