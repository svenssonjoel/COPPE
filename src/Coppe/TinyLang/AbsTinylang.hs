

module Coppe.TinyLang.AbsTinylang where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Exp
    = ELam [Exp] Exp
    | ELet Exp Exp Exp
    | EOr Exp Exp
    | EAnd Exp Exp
    | ERel Exp RelOp Exp
    | EAdd Exp AddOp Exp
    | EMul Exp MulOp Exp
    | EApp Exp Exp
    | EInt Integer
    | EFloat Double
    | EVar Ident
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div
  deriving (Eq, Ord, Show, Read)

data RelOp = LTC | LEC | GTC | GEC | EQC
  deriving (Eq, Ord, Show, Read)

